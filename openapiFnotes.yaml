openapi: 3.0.1
info:
  title: Swagger Fnotes
  description: 'This is a sample of Fnotes. Friends Family and Fellow workers'
  contact:
    email: andrii.lenyshyn@gmail.com
  version: pre-alpha 1.0.0

tags:
- name: user
  description: Operations about user

paths:

  /Notes/{note}:
    post:
      tags:
      - note
      summary: Add a new note to the database
      operationId: addnote
      parameters:
      - name: note
        in: path
        description: Note which must be added in database
        required: true
        schema:
          type: object

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
          application/xml:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
  /note/findByGroup:
    get:
      tags:
      - note
      summary: Finds notes by group
      operationId: findnotesByStatus
      parameters:
      - name: name
        in: query
        description: Name values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        400:
          description: Invalid name value
          content: {}
      security:
      - notestore_auth:
        - write:notes
        - read:notes
  /note/{NoteId}:
    get:
      tags:
      - note
      summary: Find note by group
      description: Returns a  note
      operationId: getnoteByIdGroup
      parameters:
      - name: NoteId
        in: path
        description: ID of group to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Note'
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - note
      summary: Deletes a note
      operationId: deletenote
      parameters:
      - name: NoteId
        in: path
        description: Group id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Group not found
          content: {}
      security:
      - notestore_auth:
        - write:note
        - read:note


  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: login user to system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: User name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: password or user name is not valid
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}

components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        notesId:
          type: array
          items:
            type: integer
            format: int64
        isPublic:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        GroupId:
          type: array
          items:
            type: integer
            format: int64
      xml:
        name: User
    Note:
      required:
      - name
      - author
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Buy ru, and run for Cuba party
        author:
          type: string
          example: Tom (Friend)

  securitySchemes:
    notestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://swagger.io
          scopes:
            write:notes: modify available notes
            read:notes: read your notes
    api_key:
      type: apiKey
      name: api_key
      in: header